---
description:
globs:
alwaysApply: false
---
# Cursor AI Rules for Cursor Rules Project

This document outlines specific rules and guidelines for using Cursor AI with this rules repository.

## Project Structure Rules

1. **File Organization**
   - Keep all rules in their respective directories (nuxt/, typescript/, seo/)
   - Use .mdc extension for general rules files
   - Use .md extension for specific language/framework rules
   - Maintain a clear hierarchy in the documentation

2. **Rule Documentation**
   - Each rule should be clearly explained with examples
   - Include both positive and negative examples
   - Provide reasoning for each rule
   - Link related rules when applicable

## Cursor AI Interaction Rules

1. **Code Generation**
   - Always specify the context when asking for code generation
   - Request explanations for complex code snippets
   - Ask for test cases when generating new functionality
   - Verify generated code against existing rules

2. **Code Review**
   - Use Cursor AI to review code against established rules
   - Request specific rule checks when needed
   - Ask for improvements based on the rules
   - Verify rule compliance in generated code

3. **Documentation**
   - Use Cursor AI to maintain and update documentation
   - Keep examples up to date with current best practices
   - Ensure documentation follows the established format
   - Request documentation improvements when needed

## Rule Maintenance

1. **Adding New Rules**
   - Place new rules in appropriate directories
   - Follow existing documentation format
   - Include clear examples
   - Update README.md if necessary

2. **Updating Existing Rules**
   - Maintain version history
   - Document reasons for changes
   - Update related rules if necessary
   - Ensure backward compatibility

3. **Rule Testing**
   - Test rules with Cursor AI
   - Verify rule effectiveness
   - Document edge cases
   - Update rules based on testing results

## Best Practices

1. **Rule Creation**
   - Keep rules clear and concise
   - Use specific examples
   - Include rationale
   - Consider edge cases

2. **Rule Application**
   - Apply rules consistently
   - Consider context
   - Document exceptions
   - Maintain rule hierarchy

3. **Rule Communication**
   - Use clear language
   - Provide context
   - Include examples
   - Explain reasoning

## Using Cursor AI with Rules

1. **Rule Reference**
   - Reference specific rules when asking questions
   - Use rule numbers or names
   - Provide context
   - Ask for rule clarification

2. **Rule Implementation**
   - Request rule-based code generation
   - Ask for rule compliance checks
   - Request rule-based improvements
   - Verify rule application

3. **Rule Updates**
   - Request rule modifications
   - Ask for new rule suggestions
   - Request rule testing
   - Verify rule effectiveness

## Maintenance Guidelines

1. **Regular Updates**
   - Review rules periodically
   - Update outdated rules
   - Add new rules as needed
   - Remove obsolete rules

2. **Quality Control**
   - Verify rule accuracy
   - Test rule effectiveness
   - Update examples
   - Maintain consistency

3. **Documentation**
   - Keep documentation current
   - Update examples
   - Add new use cases
   - Maintain clarity

## Rule Categories

1. **General Rules**
   - Project structure
   - Documentation
   - Code organization
   - Best practices

2. **Language-Specific Rules**
   - TypeScript
   - JavaScript
   - Python
   - Other languages

3. **Framework-Specific Rules**
   - Nuxt.js
   - React
   - Vue
   - Other frameworks

4. **Tool-Specific Rules**
   - Git
   - Testing
   - Build tools
   - Development tools

## Rule Enforcement

1. **Automated Checks**
   - Use linting rules
   - Implement automated testing
   - Use code quality tools
   - Monitor rule compliance

2. **Manual Review**
   - Regular code reviews
   - Rule compliance checks
   - Documentation reviews
   - Best practice verification

3. **Continuous Improvement**
   - Gather feedback
   - Update rules
   - Improve documentation
   - Enhance examples
